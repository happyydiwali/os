#include <stdio.h>
#include <stdlib.h>

struct process
{
    int id, at, bt, ct, wt, tat, rt, is_completed, bt_remaining;
};

void Input(struct process p[], int n)
{
    int i;
    for (i = 0; i < n; i++)
    {
        p[i].id = i + 1;
        printf("Enter AT and BT of process %d: ", i + 1);
        scanf("%d%d", &p[i].at, &p[i].bt);
        p[i].bt_remaining = p[i].bt;  
        p[i].is_completed = 0;
    }
}

void roundRobin(struct process p[], int n, int quantum)
{
    int current_time = 0, completed = 0;
    int t_tat = 0, t_wt = 0, idle_time = 0;
    
    while (completed < n)
    {
        int processed = 0;
        
        for (int i = 0; i < n; i++)
        {
            if (p[i].at <= current_time && !p[i].is_completed)
            {
                if (p[i].bt_remaining > quantum)
                {
                    current_time += quantum;
                    p[i].bt_remaining -= quantum;
                }
                else
                {
                    current_time += p[i].bt_remaining;
                    p[i].ct = current_time;
                    p[i].tat = p[i].ct - p[i].at;
                    p[i].wt = p[i].tat - p[i].bt;
                    p[i].rt = p[i].wt;
                    p[i].is_completed = 1;
                    
                    t_tat += p[i].tat;
                    t_wt += p[i].wt;
                    completed++;
                }

                processed = 1;
            }
        }

        if (processed == 0)
        {
            current_time++;  
            idle_time++;
        }
    }

    printf("\nThe Average Turn Around Time for Round Robin is: %.2f", (double)t_tat / n);
    printf("\nThe Average Waiting Time for Round Robin is: %.2f\n", (double)t_wt / n);
}

void printResult(struct process p[], int n)
{
    int i;
    printf("\n\tPId\tAT\tBT\tCT\tTAT\tWT\n");
    for (i = 0; i < n; i++)
    {
        printf("\n\t%d\t%d\t%d\t%d\t%d\t%d\n", p[i].id, p[i].at, p[i].bt, p[i].ct, p[i].tat, p[i].wt);
    }
}

void printChart(struct process p[], int n)
{
    int i;

    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (p[i].bt > p[j].bt ) {
                struct process temp = p[i];
                p[i] = p[j];
                p[j] = temp;
            }
        }
    }

    
    printf("\nGantt Chart with only Completion Time:\n");
    for (i = 0; i < n; i++)
    {
        printf("    P%d ", p[i].id);
    }

    printf("\n  0  ");
    for (i = 0; i < n; i++)
    {
        printf("   %d  ", p[i].ct);
    }
}

int main()
{
    int n, quantum;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    struct process p[n];

    Input(p, n);

    printf("\nEnter Time Quantum for Round Robin: ");
    scanf("%d", &quantum);


    roundRobin(p, n, quantum);
    printResult(p, n);
    printChart(p, n);
    
    return 0;
}